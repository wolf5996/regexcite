---
title: "Package Development"
author: "Badran Elshenawy"
date: 2025-04-25T12:00:00Z
format:
  html:
    theme: darkly
    toc: true
    toc-depth: 2
    self-contained: true
    title-block-banner: true
---

# Context

-   Working with TCGA data, I came to the realization that TCGA lacks good visualisation packages. I can create my own package, and that would be a solid publication on its own.

-   What I will do now is go through [R packages (2e)](https://r-pkgs.org/) to learn the basics of package development in general and for R specifically.

-   I will then use my own skills in combination with ChatGPT/LLMs to create a full package with documentation.

-   This is a side project that I anticipate will take several months to complete—it will teach me an immense amount about software development and has the potential to boost my CV with a full package of my own.

-   For my note-taking style, I will try to be more chill and focus on the actual book.

    -   Do not intend to include a massive amount of notes and use this document as a comprehensive reference.

    -   This is just a few points I will jot down as I go through the book. I think I value consuming the information and understanding it more than I do note-taking at this current stage of my development.

-   During my work on this book, I thought about switching a bit towards Quarto or positron for this guide.

    -   However, I think that's a poor idea because this book clearly states that it is designed to work with RStudio, which has a host of functions and utilities built-in that are meant to make the process of package development smooth.

# Notes

-   Throughout this book:

    -   `fun()` refers to functions.

    -   `var` refers to variables and function arguments.

    -   `path/` for paths.

-   **2025-04-25:** Finished welcome and preface. Will start at introduction next time. Should check for a pirated PDF version.

-   **2025-04-28:** Read the **`Introduction`**. Will start at **`The Whole Game`** next time.

# Chapter 1: The Whole Game

-   **Note:** setting WD is not necessary here at all, and the reason is that R projects set the working directory automatically.

-   Will walk through the development of a toy package called `regexcite`.

-   Should embody all the steps of package developments, which future chapters will delve into in more detail.

```{r}
# setwd
# setwd(
#   dirname(
#     rstudioapi::getActiveDocumentContext()$path
#   )
# )
# libraries
library(devtools)
packageVersion("devtools")

# creating the package
# create_package(
#   path = "regexcite"
# )
```

-   This code creates a directory which will contain my package and opens a new R session relating to the package R project.

-   The relevant files created by this are:

    -   `.Rbuildignore` lists files that we need to have around but that should not be included when building the R package from source. If you aren’t using RStudio, [`create_package()`](https://usethis.r-lib.org/reference/create_package.html) may not create this file (nor `.gitignore`) at first, since there’s no RStudio-related machinery that needs to be ignored. However, you will likely develop the need for `.Rbuildignore` at some point, regardless of what editor you are using. It is discussed in more detail in [Section 3.3.1](https://r-pkgs.org/structure.html#sec-rbuildignore).

    -   `.Rproj.user`, if you have it, is a directory used internally by RStudio.

    -   `.gitignore` anticipates Git usage and tells Git to ignore some standard, behind-the-scenes files created by R and RStudio. Even if you do not plan to use Git, this is harmless.

    -   `DESCRIPTION` provides metadata about your package. We edit this shortly and [Chapter 9](https://r-pkgs.org/description.html) covers the general topic of the `DESCRIPTION` file.

    -   `NAMESPACE` declares the functions your package exports for external use and the external functions your package imports from other packages. At this point, it is empty, except for a comment declaring that this is a file you should not edit by hand.

    -   The `R/` directory is the “business end” of your package. It will soon contain `.R` files with function definitions.

    -   `regexcite.Rproj` is the file that makes this directory an RStudio Project. Even if you don’t use RStudio, this file is harmless. Or you can suppress its creation with `create_package(..., rstudio = FALSE)`. More in [Section 4.2](https://r-pkgs.org/workflow101.html#sec-workflow101-rstudio-projects).

-   **2025-04-30:** finished sections 1.1-1.4. Will start on section 1.5 (`use_git()`) tomorrow.

    -   So far, the process seems very nice and straightforward.

-   The regexcite directory is an **`R source package`** and **`an RStudio Project`**. The next command will also turn it into a `git` repository.

-   `use_r()`: opens an R script inside `R/` where I can put my function definition. The name of the R script is the argument input to `use_r` and should be the same as the name of the function.

-   `load_all()`: loads all of the functions defined in the package without actually adding them to the global env. Good way of testing the package as it matures.

```{r}
# using git in the repo project/directory
use_git()

# coding the first function
strsplit1 <- function(x, split){
  strsplit(x, split = split)[[1]]
}

# use_r()
use_r("strsplit1")

# load_all()
load_all()

# example test
x <- "alfa,bravo,charlie,delta"
strsplit1(x, split = ",")

# checking for existence in global env
exists(
  "strsplit1",
  where = globalenv(),
  inherits = FALSE
)

```

-   **2025-05-01:** stopped at section 1.9 `check()`.
-   `check()`: checks that your package is still in working order.
-   `CTRL` + `.`: excellent keyboard shortcut to go to any other file in your project and open it in Rstudio.
-   Editing Description is easy and allows you to add metadata information about myself as the author and the package.
-   `use_mit_license()`: adds the license.
-   `document()`: creates the documentation for package functions.
    -   Documentation for a single function is handled using `roxygen2`. Check the source code file for `strsplit1()` to see the skeleton I had to insert and edit.
    -   This then creates a helper `strsplit1.Rd` file inside the `man` directory.
-   The export directive in `NAMESPACE` is what makes `strsplit1()` available to a user after attaching regexcite via [`library(regexcite)`](https://rdrr.io/r/base/library.html). Just as it is entirely possible to author `.Rd` files “by hand”, you can manage `NAMESPACE` explicitly yourself. But we choose to delegate this to devtools (and roxygen2).
    -   This happened because the roxygen2 skeleton we inserted into the source code had the @export tag.

```{r}
# check()
check()

# use_mit_license()
use_mit_license()

# document()
document()

# second check()
check()
```

-   Stopped at section 1.14 `install()`

-   
